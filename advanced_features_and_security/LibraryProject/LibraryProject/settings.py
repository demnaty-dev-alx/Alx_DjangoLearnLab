"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ddd=p_13_1ejd(6(iwyk0&5)o+4zny5a2)^b(zbot7t55gul+-'

# Security Settings for Production Environment
DEBUG = False  # Never set DEBUG to True in production. It reveals sensitive info.
ALLOWED_HOSTS = ['localhost', '127.0.0.1']  # List only trusted domains to prevent host header attacks.


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bookshelf',
    'relationship_app',
    'csp', # Install django-csp App
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'csp.middleware.CSPMiddleware',  # Enable CSP for protecting against XSS attacks.
]

ROOT_URLCONF = 'LibraryProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'bookshelf.CustomUser'


# Example CSP settings
CSP_DEFAULT_SRC = ("'self'",)  # Only allow loading content from the same domain
# CSP_SCRIPT_SRC = ("'self'", "https://apis.example.com")  # Allow scripts from self and a specific external domain
# CSP_STYLE_SRC = ("'self'", "https://fonts.googleapis.com")  # Allow styles from self and a specific external domain
# CSP_IMG_SRC = ("'self'", "https://images.example.com")  # Allow images from self and a specific external domain
# CSP_FONT_SRC = ("'self'", "https://fonts.gstatic.com")  # Allow fonts from self and Google Fonts

# Step 1: Configure Django for HTTPS Support

# Redirect all HTTP requests to HTTPS
SECURE_SSL_REDIRECT = True
# Enforce HTTPS for all future connections for the next year (31536000 seconds)
SECURE_HSTS_SECONDS = 31536000  # 1 year
# Include all subdomains in the HSTS policy
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# Allow your site to be added to the HSTS preload list
SECURE_HSTS_PRELOAD = True


# Step 2: Enforce Secure Cookies

# Ensure that session cookies are only sent over HTTPS
SESSION_COOKIE_SECURE = True
# Ensure that CSRF cookies are only sent over HTTPS
CSRF_COOKIE_SECURE = True
# Make session and CSRF cookies HttpOnly to prevent access by JavaScript
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True
# Optional: Expire the session cookie when the browser is closed
SESSION_EXPIRE_AT_BROWSER_CLOSE = True


# Step 3: Implement Secure Headers

# Prevent the site from being embedded in an iframe (Clickjacking prevention)
X_FRAME_OPTIONS = 'DENY'
# Prevent MIME sniffing and force respect for declared content types
SECURE_CONTENT_TYPE_NOSNIFF = True
# Enable the browser's built-in XSS filter to help mitigate cross-site scripting attacks
SECURE_BROWSER_XSS_FILTER = True

# HTTP_X_FORWARDED_PROTO is the header that the proxy (e.g., Nginx or Apache) sends to indicate whether the original request was made using HTTPS.
# 'https' tells Django that if the header is present and contains the value 'https', it should treat the connection as HTTPS, even if it is actually coming in over HTTP.
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# USE_X_FORWARDED_HOST is set to True to allow Django to use the X-Forwarded-Host header, which contains the original host requested by the client.
USE_X_FORWARDED_HOST = True
